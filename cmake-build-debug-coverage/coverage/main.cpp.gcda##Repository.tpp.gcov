        -:    0:Source:D:/Fisiere Facultate An3/OOP/Lab 5-6 Pb.4/Header/Model/Repository.tpp
        -:    0:Graph:D:\Fisiere Facultate An3\OOP\Lab 5-6 Pb.4\cmake-build-debug-coverage\CMakeFiles\Lab_5_6_Pb_4.dir\main.cpp.gcno
        -:    0:Data:D:\Fisiere Facultate An3\OOP\Lab 5-6 Pb.4\cmake-build-debug-coverage\CMakeFiles\Lab_5_6_Pb_4.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2://
        -:    3:// Created by badiu on 3/29/2022.
        -:    4://
        -:    5:
        -:    6:#ifndef LAB_5_6_PB_4_REPOSITORY_TPP
        -:    7:#define LAB_5_6_PB_4_REPOSITORY_TPP
        -:    8:
        -:    9:template<typename T>
function _ZN10RepositoryI8TutorialEC1Ev called 2 returned 100% blocks executed 58%
        2:   10:Repository<T>::Repository() : size(0), capacity(20) {
      42*:   11:    this->elems = new(std::nothrow) T[this->capacity];
        2:   11-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   11-block  1
    %%%%%:   11-block  2
        2:   11-block  3
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2:   11-block  4
       40:   11-block  5
call    5 returned 40
branch  6 taken 40 (fallthrough)
branch  7 taken 0 (throw)
       40:   11-block  6
       42:   11-block  7
branch  8 taken 40
branch  9 taken 2 (fallthrough)
        2:   11-block  8
    %%%%%:   11-block  9
    $$$$$:   11-block 10
    $$$$$:   11-block 11
call   10 never executed
    $$$$$:   11-block 12
call   11 never executed
        -:   12:    //if(!this->elems)
        -:   13:    //throw exception("Allocation of memory failed! \n");
        2:   14:}
        2:   14-block  0
        -:   15:
        -:   16:template<typename T>
function _ZN10RepositoryI8TutorialED1Ev called 2 returned 100% blocks executed 89%
        2:   17:Repository<T>::~Repository() {
        2:   18:    if (this->elems == nullptr)
        2:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   19:        return;
        -:   20:    else
       42:   21:        delete[] this->elems;
        2:   21-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   21-block  1
       42:   21-block  2
branch  2 taken 40 (fallthrough)
branch  3 taken 2
       40:   21-block  3
call    4 returned 40
        2:   21-block  4
call    5 returned 2
        -:   22:
       2*:   23:}
    %%%%%:   23-block  0
        2:   23-block  1
        -:   24:
        -:   25:template<typename T>
        -:   26:void Repository<T>::add(T entity) {
        -:   27:    if (size == capacity)
        -:   28:        resize();
        -:   29:    else {
        -:   30:        this->elems[this->size] = entity;
        -:   31:        this->size++;
        -:   32:    }
        -:   33:}
        -:   34:
        -:   35:template<typename T>
        -:   36:void Repository<T>::resize() {
        -:   37:    int new_capacity = this->capacity * 2;
        -:   38:    auto *aux = new(std::nothrow) T[new_capacity];
        -:   39:    //memcpy(aux, this->elems, sizeof(TElem)*size);
        -:   40:    for (int i = 0; i < size; i++)
        -:   41:        aux[i] = this->elems[i];
        -:   42:    delete[] this->elems;
        -:   43:    this->elems = aux;
        -:   44:    this->capacity = new_capacity;
        -:   45:}
        -:   46:
        -:   47:template<typename T>
        -:   48:Repository<T>::Repository(const Repository<T> &copy_repository) {
        -:   49:    this->size = copy_repository.size;
        -:   50:    this->capacity = copy_repository.capacity;
        -:   51:    this->elems = new(std::nothrow) T[this->capacity];
        -:   52:    for(int i =0;i<this->size;i++)
        -:   53:    {
        -:   54:        elems[i] = copy_repository.elems[i];
        -:   55:    }
        -:   56:    cout << "Repository copied \n";
        -:   57:}
        -:   58:
        -:   59:template<typename T>
        -:   60:T &Repository<T>::operator[](int pos) {
        -:   61:    if (pos > size)
        -:   62:        // throw error index out of bounds
        -:   63:        return this->elems[0];
        -:   64:    else
        -:   65:        return this->elems[pos];
        -:   66:}
        -:   67:
        -:   68:template<typename T>
        -:   69:int Repository<T>::getSize() {
        -:   70:    return this->size;
        -:   71:}
        -:   72:
        -:   73:template<typename T>
        -:   74:void Repository<T>::removeElement(int &pos) {
        -:   75:    if (pos > this->size)
        -:   76:        return; //Throw exception
        -:   77:    else {
        -:   78:        for (int i = pos; i < this->size - 1; i++)
        -:   79:            this->elems[i] = this->elems[i + 1];
        -:   80:        this->size--;
        -:   81:    }
        -:   82:
        -:   83:}
        -:   84:
        -:   85:template<typename T>
        -:   86:void Repository<T>::updateElement(int &pos, T &new_entity) {
        -:   87:    if(pos > this->size)
        -:   88:        return; //Throw exception
        -:   89:    else
        -:   90:    {
        -:   91:        this->elems[pos] = new_entity;
        -:   92:    }
        -:   93:}
        -:   94:
        -:   95:#endif //LAB_5_6_PB_4_REPOSITORY_TPP
        -:   96:
